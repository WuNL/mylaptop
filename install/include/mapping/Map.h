/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /home/wunl/catkin_ws/src/ugv/mapping/msg/Map.msg
 *
 */


#ifndef MAPPING_MESSAGE_MAP_H
#define MAPPING_MESSAGE_MAP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <mapping/Grid.h>

namespace mapping
{
template <class ContainerAllocator>
struct Map_
{
  typedef Map_<ContainerAllocator> Type;

  Map_()
    : header()
    , nHalfSize(0)
    , fResolution(0.0)
    , fCenterX(0.0)
    , fCenterY(0.0)
    , fMapMaxElevation(0.0)
    , fMapMinElevation(0.0)
    , flagImage(0)
    , fVehicleX(0.0)
    , fVehicleY(0.0)
    , fVehicleZ(0.0)
    , fVehicleHeading(0.0)
    , map()  {
    }
  Map_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , nHalfSize(0)
    , fResolution(0.0)
    , fCenterX(0.0)
    , fCenterY(0.0)
    , fMapMaxElevation(0.0)
    , fMapMinElevation(0.0)
    , flagImage(0)
    , fVehicleX(0.0)
    , fVehicleY(0.0)
    , fVehicleZ(0.0)
    , fVehicleHeading(0.0)
    , map(_alloc)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _nHalfSize_type;
  _nHalfSize_type nHalfSize;

   typedef float _fResolution_type;
  _fResolution_type fResolution;

   typedef float _fCenterX_type;
  _fCenterX_type fCenterX;

   typedef float _fCenterY_type;
  _fCenterY_type fCenterY;

   typedef float _fMapMaxElevation_type;
  _fMapMaxElevation_type fMapMaxElevation;

   typedef float _fMapMinElevation_type;
  _fMapMinElevation_type fMapMinElevation;

   typedef int8_t _flagImage_type;
  _flagImage_type flagImage;

   typedef float _fVehicleX_type;
  _fVehicleX_type fVehicleX;

   typedef float _fVehicleY_type;
  _fVehicleY_type fVehicleY;

   typedef float _fVehicleZ_type;
  _fVehicleZ_type fVehicleZ;

   typedef float _fVehicleHeading_type;
  _fVehicleHeading_type fVehicleHeading;

   typedef std::vector< ::mapping::Grid_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mapping::Grid_<ContainerAllocator> >::other >  _map_type;
  _map_type map;




  typedef boost::shared_ptr< ::mapping::Map_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mapping::Map_<ContainerAllocator> const> ConstPtr;

}; // struct Map_

typedef ::mapping::Map_<std::allocator<void> > Map;

typedef boost::shared_ptr< ::mapping::Map > MapPtr;
typedef boost::shared_ptr< ::mapping::Map const> MapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mapping::Map_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mapping::Map_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mapping

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'mapping': ['/home/wunl/catkin_ws/src/ugv/mapping/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mapping::Map_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mapping::Map_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mapping::Map_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mapping::Map_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mapping::Map_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mapping::Map_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mapping::Map_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9e8667361a3a10ad8f58c076746b9d63";
  }

  static const char* value(const ::mapping::Map_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9e8667361a3a10adULL;
  static const uint64_t static_value2 = 0x8f58c076746b9d63ULL;
};

template<class ContainerAllocator>
struct DataType< ::mapping::Map_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mapping/Map";
  }

  static const char* value(const ::mapping::Map_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mapping::Map_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
###########################################################\n\
#Elevation Map Configuration\n\
#half size of the map;\n\
int32 nHalfSize\n\
#Elevation Grid Resolution, in meter;\n\
float32 fResolution\n\
#x coordinate of the center of the map in world frame\n\
float32 fCenterX\n\
#y coordinate of the center of the map in world frame\n\
float32 fCenterY\n\
#maximum elevation of the map in world frame\n\
float32 fMapMaxElevation\n\
#minimum elevation of the map in world frame\n\
float32 fMapMinElevation\n\
#flag of image\n\
int8 flagImage\n\
###########################################################\n\
\n\
###########################################################\n\
#Vehicle Status\n\
#vehicle x in world frame, in meters\n\
float32 fVehicleX\n\
#vehicle y in world frame, in meters\n\
float32 fVehicleY\n\
#vehicle z in world frame, in meters\n\
float32 fVehicleZ\n\
#vehicle heading angle, in rad\n\
float32 fVehicleHeading\n\
###########################################################\n\
Grid[] map\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: mapping/Grid\n\
#Header header\n\
#maximum elevation in this grid;\n\
#float32 fMaxElevation\n\
#minimum elevation in this grid;\n\
#float32 fMinElevation\n\
#average elevation in this grid;\n\
#float32 fAvgElevation\n\
#points falling in this grid;\n\
#int32 nPointCount\n\
#up point falling in this grid;\n\
#int32 nUpCount\n\
#down point falling in this grid;\n\
#int32 nDownCount\n\
\n\
\n\
#average elevation in this grid;\n\
float32 fAvgElevation\n\
#proability\n\
int8 proability\n\
#texture\n\
int8 texture\n\
";
  }

  static const char* value(const ::mapping::Map_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mapping::Map_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.nHalfSize);
      stream.next(m.fResolution);
      stream.next(m.fCenterX);
      stream.next(m.fCenterY);
      stream.next(m.fMapMaxElevation);
      stream.next(m.fMapMinElevation);
      stream.next(m.flagImage);
      stream.next(m.fVehicleX);
      stream.next(m.fVehicleY);
      stream.next(m.fVehicleZ);
      stream.next(m.fVehicleHeading);
      stream.next(m.map);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Map_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mapping::Map_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mapping::Map_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "nHalfSize: ";
    Printer<int32_t>::stream(s, indent + "  ", v.nHalfSize);
    s << indent << "fResolution: ";
    Printer<float>::stream(s, indent + "  ", v.fResolution);
    s << indent << "fCenterX: ";
    Printer<float>::stream(s, indent + "  ", v.fCenterX);
    s << indent << "fCenterY: ";
    Printer<float>::stream(s, indent + "  ", v.fCenterY);
    s << indent << "fMapMaxElevation: ";
    Printer<float>::stream(s, indent + "  ", v.fMapMaxElevation);
    s << indent << "fMapMinElevation: ";
    Printer<float>::stream(s, indent + "  ", v.fMapMinElevation);
    s << indent << "flagImage: ";
    Printer<int8_t>::stream(s, indent + "  ", v.flagImage);
    s << indent << "fVehicleX: ";
    Printer<float>::stream(s, indent + "  ", v.fVehicleX);
    s << indent << "fVehicleY: ";
    Printer<float>::stream(s, indent + "  ", v.fVehicleY);
    s << indent << "fVehicleZ: ";
    Printer<float>::stream(s, indent + "  ", v.fVehicleZ);
    s << indent << "fVehicleHeading: ";
    Printer<float>::stream(s, indent + "  ", v.fVehicleHeading);
    s << indent << "map[]" << std::endl;
    for (size_t i = 0; i < v.map.size(); ++i)
    {
      s << indent << "  map[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mapping::Grid_<ContainerAllocator> >::stream(s, indent + "    ", v.map[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAPPING_MESSAGE_MAP_H
