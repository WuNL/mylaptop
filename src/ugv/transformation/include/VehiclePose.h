/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /program/catkin_ws/src/ugv/transformation/msg/VehiclePose.msg
 *
 */


#ifndef TRANSFORMATION_MESSAGE_VEHICLEPOSE_H
#define TRANSFORMATION_MESSAGE_VEHICLEPOSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace transformation
{
template <class ContainerAllocator>
struct VehiclePose_
{
  typedef VehiclePose_<ContainerAllocator> Type;

  VehiclePose_()
    : header()
    , accelerationX(0.0)
    , accelerationY(0.0)
    , accelerationZ(0.0)
    , angularRateX(0.0)
    , angularRateY(0.0)
    , angularRateZ(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , velocityX(0.0)
    , velocityY(0.0)
    , velocityZ(0.0)
    , heading(0.0)
    , pitch(0.0)
    , roll(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)  {
    }
  VehiclePose_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , accelerationX(0.0)
    , accelerationY(0.0)
    , accelerationZ(0.0)
    , angularRateX(0.0)
    , angularRateY(0.0)
    , angularRateZ(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , velocityX(0.0)
    , velocityY(0.0)
    , velocityZ(0.0)
    , heading(0.0)
    , pitch(0.0)
    , roll(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _accelerationX_type;
  _accelerationX_type accelerationX;

   typedef float _accelerationY_type;
  _accelerationY_type accelerationY;

   typedef float _accelerationZ_type;
  _accelerationZ_type accelerationZ;

   typedef float _angularRateX_type;
  _angularRateX_type angularRateX;

   typedef float _angularRateY_type;
  _angularRateY_type angularRateY;

   typedef float _angularRateZ_type;
  _angularRateZ_type angularRateZ;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef float _altitude_type;
  _altitude_type altitude;

   typedef float _velocityX_type;
  _velocityX_type velocityX;

   typedef float _velocityY_type;
  _velocityY_type velocityY;

   typedef float _velocityZ_type;
  _velocityZ_type velocityZ;

   typedef float _heading_type;
  _heading_type heading;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;




  typedef boost::shared_ptr< ::transformation::VehiclePose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::transformation::VehiclePose_<ContainerAllocator> const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;

}; // struct VehiclePose_

typedef ::transformation::VehiclePose_<std::allocator<void> > VehiclePose;

typedef boost::shared_ptr< ::transformation::VehiclePose > VehiclePosePtr;
typedef boost::shared_ptr< ::transformation::VehiclePose const> VehiclePoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::transformation::VehiclePose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::transformation::VehiclePose_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace transformation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/hydro/share/std_msgs/cmake/../msg'], 'transformation': ['/program/catkin_ws/src/ugv/transformation/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::transformation::VehiclePose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::transformation::VehiclePose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::transformation::VehiclePose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::transformation::VehiclePose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::transformation::VehiclePose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::transformation::VehiclePose_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::transformation::VehiclePose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a0541797f46aeae2f6afb0486ce01bf1";
  }

  static const char* value(const ::transformation::VehiclePose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa0541797f46aeae2ULL;
  static const uint64_t static_value2 = 0xf6afb0486ce01bf1ULL;
};

template<class ContainerAllocator>
struct DataType< ::transformation::VehiclePose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "transformation/VehiclePose";
  }

  static const char* value(const ::transformation::VehiclePose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::transformation::VehiclePose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
float32 accelerationX\n\
float32 accelerationY\n\
float32 accelerationZ\n\
\n\
float32 angularRateX\n\
float32 angularRateY\n\
float32 angularRateZ\n\
\n\
float64 latitude\n\
float64 longitude\n\
float32 altitude\n\
\n\
float32 velocityX\n\
float32 velocityY\n\
float32 velocityZ\n\
\n\
float32 heading\n\
float32 pitch\n\
float32 roll\n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::transformation::VehiclePose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::transformation::VehiclePose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.accelerationX);
      stream.next(m.accelerationY);
      stream.next(m.accelerationZ);
      stream.next(m.angularRateX);
      stream.next(m.angularRateY);
      stream.next(m.angularRateZ);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.velocityX);
      stream.next(m.velocityY);
      stream.next(m.velocityZ);
      stream.next(m.heading);
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct VehiclePose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::transformation::VehiclePose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::transformation::VehiclePose_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "accelerationX: ";
    Printer<float>::stream(s, indent + "  ", v.accelerationX);
    s << indent << "accelerationY: ";
    Printer<float>::stream(s, indent + "  ", v.accelerationY);
    s << indent << "accelerationZ: ";
    Printer<float>::stream(s, indent + "  ", v.accelerationZ);
    s << indent << "angularRateX: ";
    Printer<float>::stream(s, indent + "  ", v.angularRateX);
    s << indent << "angularRateY: ";
    Printer<float>::stream(s, indent + "  ", v.angularRateY);
    s << indent << "angularRateZ: ";
    Printer<float>::stream(s, indent + "  ", v.angularRateZ);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<float>::stream(s, indent + "  ", v.altitude);
    s << indent << "velocityX: ";
    Printer<float>::stream(s, indent + "  ", v.velocityX);
    s << indent << "velocityY: ";
    Printer<float>::stream(s, indent + "  ", v.velocityY);
    s << indent << "velocityZ: ";
    Printer<float>::stream(s, indent + "  ", v.velocityZ);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRANSFORMATION_MESSAGE_VEHICLEPOSE_H
