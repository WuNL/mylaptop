/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /program/catkin_ws/src/ugv/inertial/msg/NCOM.msg
 *
 */


#ifndef INERTIAL_MESSAGE_NCOM_H
#define INERTIAL_MESSAGE_NCOM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace inertial
{
template <class ContainerAllocator>
struct NCOM_
{
  typedef NCOM_<ContainerAllocator> Type;

  NCOM_()
    : header()
    , time(0)
    , accelerationX(0.0)
    , accelerationY(0.0)
    , accelerationZ(0.0)
    , angularRateX(0.0)
    , angularRateY(0.0)
    , angularRateZ(0.0)
    , navStatus(0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , velocityNorth(0.0)
    , velocityEast(0.0)
    , velocityDown(0.0)
    , heading(0.0)
    , pitch(0.0)
    , roll(0.0)  {
    }
  NCOM_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , time(0)
    , accelerationX(0.0)
    , accelerationY(0.0)
    , accelerationZ(0.0)
    , angularRateX(0.0)
    , angularRateY(0.0)
    , angularRateZ(0.0)
    , navStatus(0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , velocityNorth(0.0)
    , velocityEast(0.0)
    , velocityDown(0.0)
    , heading(0.0)
    , pitch(0.0)
    , roll(0.0)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _time_type;
  _time_type time;

   typedef float _accelerationX_type;
  _accelerationX_type accelerationX;

   typedef float _accelerationY_type;
  _accelerationY_type accelerationY;

   typedef float _accelerationZ_type;
  _accelerationZ_type accelerationZ;

   typedef float _angularRateX_type;
  _angularRateX_type angularRateX;

   typedef float _angularRateY_type;
  _angularRateY_type angularRateY;

   typedef float _angularRateZ_type;
  _angularRateZ_type angularRateZ;

   typedef uint8_t _navStatus_type;
  _navStatus_type navStatus;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef float _altitude_type;
  _altitude_type altitude;

   typedef float _velocityNorth_type;
  _velocityNorth_type velocityNorth;

   typedef float _velocityEast_type;
  _velocityEast_type velocityEast;

   typedef float _velocityDown_type;
  _velocityDown_type velocityDown;

   typedef float _heading_type;
  _heading_type heading;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _roll_type;
  _roll_type roll;




  typedef boost::shared_ptr< ::inertial::NCOM_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::inertial::NCOM_<ContainerAllocator> const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;

}; // struct NCOM_

typedef ::inertial::NCOM_<std::allocator<void> > NCOM;

typedef boost::shared_ptr< ::inertial::NCOM > NCOMPtr;
typedef boost::shared_ptr< ::inertial::NCOM const> NCOMConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::inertial::NCOM_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::inertial::NCOM_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace inertial

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'inertial': ['/program/catkin_ws/src/ugv/inertial/msg'], 'std_msgs': ['/opt/ros/hydro/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::inertial::NCOM_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::inertial::NCOM_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::inertial::NCOM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::inertial::NCOM_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::inertial::NCOM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::inertial::NCOM_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::inertial::NCOM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "61d8ee5f52d2961d53ecbc0a568e7bdd";
  }

  static const char* value(const ::inertial::NCOM_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x61d8ee5f52d2961dULL;
  static const uint64_t static_value2 = 0x53ecbc0a568e7bddULL;
};

template<class ContainerAllocator>
struct DataType< ::inertial::NCOM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "inertial/NCOM";
  }

  static const char* value(const ::inertial::NCOM_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::inertial::NCOM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
#batch1\n\
uint16 time\n\
float32 accelerationX\n\
float32 accelerationY\n\
float32 accelerationZ\n\
float32 angularRateX\n\
float32 angularRateY\n\
float32 angularRateZ\n\
uint8 navStatus\n\
#bath2\n\
float64 latitude\n\
float64 longitude\n\
float32 altitude\n\
float32 velocityNorth\n\
float32 velocityEast\n\
float32 velocityDown\n\
float32 heading\n\
float32 pitch\n\
float32 roll\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const ::inertial::NCOM_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::inertial::NCOM_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.time);
      stream.next(m.accelerationX);
      stream.next(m.accelerationY);
      stream.next(m.accelerationZ);
      stream.next(m.angularRateX);
      stream.next(m.angularRateY);
      stream.next(m.angularRateZ);
      stream.next(m.navStatus);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.velocityNorth);
      stream.next(m.velocityEast);
      stream.next(m.velocityDown);
      stream.next(m.heading);
      stream.next(m.pitch);
      stream.next(m.roll);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct NCOM_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::inertial::NCOM_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::inertial::NCOM_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.time);
    s << indent << "accelerationX: ";
    Printer<float>::stream(s, indent + "  ", v.accelerationX);
    s << indent << "accelerationY: ";
    Printer<float>::stream(s, indent + "  ", v.accelerationY);
    s << indent << "accelerationZ: ";
    Printer<float>::stream(s, indent + "  ", v.accelerationZ);
    s << indent << "angularRateX: ";
    Printer<float>::stream(s, indent + "  ", v.angularRateX);
    s << indent << "angularRateY: ";
    Printer<float>::stream(s, indent + "  ", v.angularRateY);
    s << indent << "angularRateZ: ";
    Printer<float>::stream(s, indent + "  ", v.angularRateZ);
    s << indent << "navStatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.navStatus);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<float>::stream(s, indent + "  ", v.altitude);
    s << indent << "velocityNorth: ";
    Printer<float>::stream(s, indent + "  ", v.velocityNorth);
    s << indent << "velocityEast: ";
    Printer<float>::stream(s, indent + "  ", v.velocityEast);
    s << indent << "velocityDown: ";
    Printer<float>::stream(s, indent + "  ", v.velocityDown);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INERTIAL_MESSAGE_NCOM_H
